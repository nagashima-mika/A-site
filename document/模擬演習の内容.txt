■模擬演習

ゆ　っ　く　り　や　る　お

・新しいリポジトリを作る（クローンしてくる）
（平）新しいリポジトリを作成「git_study」
（平）長島さんを「git_study」に招待する（git01085-nagashima）
〜長島さんのPCに画面を切りかえる〜
（長島）「git_study」をクローンしてくる
（長島）「git_study」の「master」で適当なファイルを変更してプッシュ
〜平のPCに画面を切りかえる〜
（平）プルして長島さんの変更履歴を確認（複数人で同じリポジトリでの作業ができることを確認）


〜（平）更新用の模擬演習データ投入〜


・新しいブランチとはじめてのコミット
（平）新しいブランチを作成「151030_はじめてのブランチ」
（平）「151030_はじめてのブランチ」内に新規でindex1.htmlを作成。コミットメッセージを入力。
（平）「151030_はじめてのブランチ」から「master」に切り替えて、index1.htmlが消えているところを見てもらう


・はじめてのマージ
上の作業に引き続き...
（平）「151030_はじめてのブランチ」を「master」にマージする
（平）SourceTree上で「151030_はじめてのブランチ」と「master」がつながったところを確認
（平）masterに切り替えたときにindex1.htmlが追加されているところを確認


・2人で作業する
（長島）新規ブランチを作成、プッシュ「151030_複数人作業」
（平）フェッチして、リモートリポジトリから「151030_複数人作業」をチェックアウトする
（長島・平）お互いにデータをちょっといじる＆お互いにプッシュ、プルする（index.htmlは2人ともいぢる）
（平）プルリク作成して変更内容の確認。プルリク一覧に作成したプルリクが表示されていることを確認。（ドコモでは使ってなかった）
（平）変更問題なければ「master」にマージ
（平）「master」にマージするとプルリクがcloseになることを確認。


・コミットのはなしを詳しく（リベートについて）
コミットってなんで作業毎にする必要があるの？
一気に全部作業してコミットしちゃえばいいじゃん？
って思うはず。

例えば....
開発していて、なんらかの不具合が出た時、どの作業の時に出た不具合なのか履歴が追える。（jsとか）
コミット単位で更新内容が確認できるので（プルリク、SourceTreeで）、誰がどの更新作業をしたのか、どこまで作業をしたのか分かりやすい。
コミット単位でできることがいくつかある。よく使うのが「リベート」（コミットの打ち消し）

（平）ブランチ「151030_リベート」を作成。
（平）index.htmlを適当に修正＆コミット。コミットの打ち消しをする。（いつのコミットでもできます、何回でもできます...）
（平）お互いにデータをちょっといじる＆お互いにプッシュ、プルする（index.htmlは2人ともいぢる）
（平）変更問題なければ「master」にマージ。プルリクがcloseになることを確認。


〜長島さんのPCに画面を切りかえる〜


・模擬演習
Dir  平
制作 長島

（平）長島さんに下記修正依頼
<li><a href="#politics">経営理念</a></li>　⇒　<li><a href="#politics">平の経営理念</a></li>

（長島）模擬演習のindex.htmlを画面に表示。修正箇所を画面でみんなに説明。
（長島）ブランチを作成「151030_経営理念の変更」。修正対応の一連の流れを見せながら作業。プルリクを作成。平にプルリクURLと一緒に確認出しをする。（通常運用ではバックログでの報告＆テストサーバでの確認だけど、今回はハングアウトの連絡とローカルでの確認。）

〜平のPCに画面を切りかえる〜
（平）プルリク＆ブランチをチェックアウトして修正内容を確認
（平）追加で下記の修正を依頼（プルリクにコメントを入れるところを説明）
<li><a href="#politics">平の経営理念</a></li>　⇒　<li><a href="#politics" target="_blanc">平の経営理念</a></li>

（長島）追加の修正内容を対応＆プッシュ。ハングで連絡。
（平）プルリク＆ブランチをチェックアウトして修正内容を確認。
（平）お客さん確認OK。バッチを使って納品ファイルの生成。（納品ファイルは制作者＆Dirチェックどっちも作成してダブルチェックを行うことが望ましい。今回は割愛。）
（平）公開完了したら「master」にマージ


〜ブランチを切る人とかタイミング、マージのタイミングとかはなし〜
AXAは制作者がブランチの作成からマージまで作業。Dirはテストサーバのチェック、チェックアウトして納品データの作成。
docomoはブランチはDirが切り、制作者の作業完了後にマージも行う。制作者はDirが切ったブランチで作業するまで。
マージのタイミングは、AXAは納品後の修正が多かったため公開後にマージしていた。
docomoは納品後修正はなかったので納品のタイミングでマージしていた。
案件によってフローは変えてうまく案件がまわせるようなフローにしていくのがGOOD。


・プルリクで見れること詳しく
プルリクサンプル：https://ghe.members-dev.com/BU2/sandbox/pull/13/files?diff-0=2-100（平しか見れない）
ファイルをリネームした時はリネーム前と後のファイル名を表示してくれる。
画像の差分の確認が簡単。2-up、Swipe、OnionSkinの2種類の確認方法がある。（これがめっちゃ便利）
新規ページの場合は全部グリーンで表示。
「Conversation」「Commits」「Files changed」タブをそれぞれ説明。


・衝突体験
Gitでは同じファイルを編集していても編集箇所が違えば複数人で作業しても更新内容がきれいに反映されます。
でも、同じ行を編集しちゃったとき（いわゆる衝突）がおきると警告がでるのでためしにやってみます。

〜長島さんのPCに画面を切りかえる〜

（長島）ブランチ「151030_衝突体験」を作成。プッシュ
（平）「151030_衝突体験」をチェックアウト
（平）先に、index.htmlの「ビジョン」⇒「平のビジョン」に変更＆プッシュ
（長島）その後に、index.htmlの「ビジョン」⇒「長島のビジョン」に変更＆プッシュ
（長島）衝突した時のエラー表示とソースに表示されるエラー（平の更新と長島さんの更新内容）を確認して説明。
（長島）衝突した時は、更新内容を確認して正しい更新内容を反映する。（不明な場合は絶対に触らないでDirに相談しましょう）
（長島）変更内容をコミットしてプッシュ
（長島）解説だけなので「master」にマージ


・スタッシュについて
間違って別のブランチで作業しちゃった！とかあるある。

（平）ブランチを作成しないで「master」で修正内容を反映。
（平）変更内容をスタッシュで避難。スタッシュされた内容がどこに表示されるか説明。
（平）ブランチ「151030_スタッシュ」を作成。
（平）ブランチ「151030_スタッシュ」にスタッシュした内容を反映＆コミット＆プッシュ。
（平）解説だけなので「master」にマージ


・チェリーピックについて
